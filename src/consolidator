#!/usr/bin/env bash
VERSION=$(jq -r .version ~/.config/crew-mates/package.json)

OPTION=$1

if [[ "$OPTION" = "-v" || "$OPTION" = "--version" ]]; then
  echo $VERSION
  exit 0
fi

RUNTIME_PATH=${RUNTIME_PATH:-"/app"}

cd $RUNTIME_PATH

LOG_MESSAGE=""

log () {
  echo $LOG_MESSAGE

  if [ -f "$RUNTIME_PATH/comms.sh" ]; then
    $RUNTIME_PATH/comms.sh "$LOG_MESSAGE"
  fi
}

TRIES=0

repo_url_from_json=$(jq -r '.crewMates.pkgRepoUrl | values' ./package.json)
PKG_REPO_URL=${repo_url_from_json:-$PKG_REPO_URL}

if [ -z "$PKG_REPO_URL" ]; then
  LOG_MESSAGE="🚨 FATAL: No PKG_REPO_URL found!"
  log
  exit 1
fi

PKG_NAME=$(jq -r .name ./package.json)
PKG_SELF_PACKS=$(jq -r .crewMates.selfBuild ./package.json)
PKG_VERSION=$( if [ "$PKG_SELF_PACKS" = "null" ]; then jq -r .version ./package.json; else yarn build:version | tail -n 2 | head -n 1; fi )
OUTPUT_FILE=""

LOG_MESSAGE="💾 (v$VERSION) Consolidating $PKG_NAME v$PKG_VERSION..."
log

LOG_MESSAGE=">>> Stage: $STAGE"
log

install_dependencies () {
  yarn install
  if [[ "$PACK_PATH" != "null" && -f $PACK_PATH/package.json ]]; then
    pushd $PACK_PATH
    yarn install && popd || return 1
  fi
}

prepare () {
  DEPLOYED_VERSION=$(hostler get $PKG_REPO_URL/$PKG_NAME/$STAGE.version)

  if [ -z "$PKG_VERSION" ]; then
    LOG_MESSAGE="🚨 ERROR: Unable to read package version."
    log
    exit 1
  fi

  if [[ "$PKG_VERSION" = "$DEPLOYED_VERSION" ]]; then
    LOG_MESSAGE="🚨 ERROR: Package version is the same as version deployed. Bump the package version and try again."
    log
    exit 1
  fi

  if [[ "$PKG_SELF_PACKS" = "null" ]]; then
    LOG_MESSAGE=">>> Fetching dependencies and building package..."
    log
    install_dependencies &&\
    yarn build &&\
    bundle-deps &&\
    echo '' >> package.json
  else
    LOG_MESSAGE=">>> Fetching dependencies..."
    log
    install_dependencies
  fi
}

pack () {
  if [[ "$PKG_SELF_PACKS" = "null" ]]; then
    LOG_MESSAGE="⚙️ Packing: $PKG_NAME v$PKG_VERSION"
    log

    PACK_PATH="$(jq -r .crewMates.packPath ./package.json)"
    NO_START="$(jq -r .crewMates.noStart ./package.json)"

    if [[ "$NO_START" = "true" ]]; then
      { echo "{\"name\": $(jq .name ./package.json), \"version\": $(jq .version ./package.json), \"scripts\": {\"start\": \"echo No start...\"}, \"crewMates\": $(jq .crewMates ./package.json)}" > ./packageb.json; } &&\
      rm ./package.json &&\
      mv ./packageb.json ./package.json || return 1
    fi

    if [[ "$PACK_PATH" != "null" && ! -f $PACK_PATH/package.json ]]; then
      cp ./package.json $PACK_PATH/package.json &&\
      cd $PACK_PATH || return 1
    fi

    OUTPUT_FILE=$(npm pack | tail -n 1)

    if [[ "$PACK_PATH" = "null" ]]; then
      mkdir -p package/node_modules &&\
      cp -rf node_modules/.??* package/node_modules/ 2>/dev/null;\
      cp yarn.lock package/yarn.lock &&\
      gunzip $OUTPUT_FILE &&\
      tar -uf $PKG_NAME-$PKG_VERSION.tar $(ls -d ./package/node_modules/.??* ./package/yarn.lock 2>/dev/null) &&\
      gzip -c $PKG_NAME-$PKG_VERSION.tar > $OUTPUT_FILE || return 1
    fi

    echo $PKG_VERSION > $STAGE.version &&\
    md5sum $OUTPUT_FILE > $OUTPUT_FILE.checksum
  else
    LOG_MESSAGE="⚙️ Building and self-packing: $PKG_NAME v$PKG_VERSION"
    log

    BUILD_OUTPUT=$(yarn build)
    BUILD_SUCCESS_MSG=$(echo "$BUILD_OUTPUT" | tail -n 2 | head -n 1)
    OUTPUT_FILE=$(echo "$BUILD_OUTPUT" | tail -n 3 | head -n 1)

    if [[ "$BUILD_SUCCESS_MSG" != *"success"* ]]; then
      LOG_MESSAGE="🚨 ERROR: Build failed to output 'success'. To debug this make sure the sub-string 'success' is present if you run: yarn build | tail -n 2 | head -n 1"
      log
      exit 1
    fi

    if [ ! -f $OUTPUT_FILE ]; then
      LOG_MESSAGE="🚨 ERROR: Unable to find output file '$OUTPUT_FILE' (file name expected to be the output of: yarn build | tail -n 3 | head -n 1)"
      log
      exit 1
    fi

    echo $PKG_VERSION > $STAGE.version &&\
    md5sum $OUTPUT_FILE > $OUTPUT_FILE.checksum
  fi
}

upload () {
  if [[ "$OPTION" = "--no-upload" ]]; then
    LOG_MESSAGE=">>> Skipping upload..."
    log
  else
    LOG_MESSAGE="🚚 Handing to hostler for uploading: $PKG_NAME v$PKG_VERSION"
    log
    hostler put $PKG_REPO_URL/$PKG_NAME/$OUTPUT_FILE $OUTPUT_FILE &&\
    hostler put $PKG_REPO_URL/$PKG_NAME/$OUTPUT_FILE.checksum $OUTPUT_FILE.checksum &&\
    hostler put $PKG_REPO_URL/$PKG_NAME/$STAGE.version $STAGE.version
  fi
}

cleanup () {
  rm -f *.tgz
  rm -f *.tgz.checksum
  rm -f $STAGE.version
  rm -f *.tar
  rm -rf package
}

attempt () {
  ((TRIES=TRIES+1))
  LOG_MESSAGE=">>> Pack attempt: $TRIES"
  log

  if [ "$TRIES" -le 3 ]; then
    { prepare && pack && upload; } || { cleanup && attempt; }
    RESULT=$?
    cleanup
    return $RESULT
  else
    LOG_MESSAGE="🚨 FAILED CONSOLIDATING APP AFTER $TRIES ATTEMPTS!"
    log
    cleanup
    return 1
  fi
}

if [[ "$OPTION" = "--cleanup" ]]; then
  LOG_MESSAGE="🧹 (v$VERSION) Cleaning up $PKG_NAME v$PKG_VERSION..."
  log
  cleanup
  LOG_MESSAGE="Done."
  log
fi
  attempt && LOG_MESSAGE="📦 Consolidated app after $TRIES tries" log
fi
