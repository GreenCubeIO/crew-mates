#!/usr/bin/env bash

if [[ "$1" = '-v' || "$1" = '--version' ]]; then
  jq -r .version ~/.config/crew-mates/package.json
  exit 0
fi

echo "🚢 Chief Mate reporting to deck..."

printf 0 > $RUNTIME_PATH/app.retries
printf 1 > $RUNTIME_PATH/app.state

FIRST_RUN=1
LOG_MESSAGE=""
PROCESSED_LOG_MESSAGE=""

LOG_TIMEZONE=${LOG_TIMEZONE:-"America/Costa_Rica"}

log () {
  PROCESSED_LOG_MESSAGE="$CLUSTER_REGION > $CLUSTER_TYPE > $(hostname): $LOG_MESSAGE"

  echo $LOG_MESSAGE

  if [ -f $RUNTIME_PATH/comms.sh ]; then
    $RUNTIME_PATH/comms.sh "$PROCESSED_LOG_MESSAGE"
  fi
}

DEPLOYMENT_VERSION=$(hostler get $PKG_REPO_URL/$PKG_NAME/$STAGE.version | sed -e 's/[[:space:]]//g')

download_app () {
  echo "Running download_app..."
  hostler get $PKG_REPO_URL/$PKG_NAME/$PKG_NAME-$DEPLOYMENT_VERSION.tgz $PKG_NAME-$DEPLOYMENT_VERSION.tgz
}

verify_download () {
  echo "Running verify_download..."

  [ "$DEBUG" = "TRUE" ] && echo $PKG_NAME-$DEPLOYMENT_VERSION.tgz
  [ "$DEBUG" = "TRUE" ] && echo $PKG_REPO_URL/$PKG_NAME/$PKG_NAME-$DEPLOYMENT_VERSION.tgz.checksum
  [ "$DEBUG" = "TRUE" ] && md5sum $PKG_NAME-$DEPLOYMENT_VERSION.tgz
  [ "$DEBUG" = "TRUE" ] && hostler get $PKG_REPO_URL/$PKG_NAME/$PKG_NAME-$DEPLOYMENT_VERSION.tgz.checksum

  if [ "$(md5sum $PKG_NAME-$DEPLOYMENT_VERSION.tgz)" = "$(hostler get $PKG_REPO_URL/$PKG_NAME/$PKG_NAME-$DEPLOYMENT_VERSION.tgz.checksum)" ]; then
    [ "$DEBUG" = "TRUE" ] && echo "0"
    return 0
  fi

  echo "WARNING add checksum mismatch! Aborting update."
  return 1
}

unpack_app () {
  echo "Running unpack_app..."
  tar -zxf $PKG_NAME-$DEPLOYMENT_VERSION.tgz --directory $RUNTIME_PATH/
}

stop_app () {
  echo "Running stop_app..."

  if [[ "$FIRST_RUN" = 0 && "$(cat $RUNTIME_PATH/app.state)" = 0 ]]; then
    LOG_MESSAGE="⏸ Stopping package: $PKG_NAME"
    log
  fi

  kill $(cat $RUNTIME_PATH/app.pid) || echo "No app to kill..."
}

replace_app () {
  echo "Running replace_app..."
  rm -rf $RUNTIME_PATH/pkg
  mv $RUNTIME_PATH/package $RUNTIME_PATH/pkg
}

run_app () {
  echo "Running run_app..."

  LOG_MESSAGE="🚥 Starting package (try $(cat $RUNTIME_PATH/app.retries)): $PKG_NAME"
  log

  FIRST_RUN=0
  touch $RUNTIME_PATH/app.raising

  bash -c 'echo $$ > $RUNTIME_PATH/app.pid && cd $RUNTIME_PATH/pkg && exec yarn start' &
}

ensure_app_running () {
  [ "$DEBUG" = "TRUE" ] && echo "Running ensure_app_running..."
  PREV_APP_STATE=$(cat $RUNTIME_PATH/app.state)

  # usual timeout is 30s, this gives time for app to fail before ensuring it's up
  response_timeout=$((SECONDS+$APP_RESPONSE_TIMEOUT))

  echo 1 > $RUNTIME_PATH/app.state
  while [[ "$(cat $RUNTIME_PATH/app.state)" != 0 && $SECONDS -lt $response_timeout ]]
  do
    curl -sS -f --max-time 120 -o /dev/null -H "X-Api-Token: $API_TOKEN" -H "X-Forwarded-Host: $API_HOST" -H "X-Forwarded-Proto: $API_PROTOCOL" http://localhost:${PORT:-8000}
    echo $? > $RUNTIME_PATH/app.state
    sleep 2
  done

  [ "$DEBUG" = "TRUE" ] && echo "PREV_APP_STATE: $PREV_APP_STATE"
  [ "$DEBUG" = "TRUE" ] && echo "APP_STATE: $(cat $RUNTIME_PATH/app.state)"

  if [ "$(cat $RUNTIME_PATH/app.state)" != 0 ]; then
    if [[ "$PREV_APP_STATE" = 0 ]]; then
      LOG_MESSAGE="🚑 App is unresponsive, will attempt to revive..."
      log
    fi

    echo "$(cat $RUNTIME_PATH/app.retries | awk '{$0=$1+1}1')" > $RUNTIME_PATH/app.retries
  elif [ "$PREV_APP_STATE" != 0 ]; then
    if [ "$PREV_APP_STATE" = 1 ]; then
      LOG_MESSAGE="✅ $(TZ='$LOG_TIMEZONE' date) > SUCCESS STARTING APP AFTER $(cat $RUNTIME_PATH/app.retries) RETRIES: $DEPLOYMENT_VERSION"
      log
    else
      LOG_MESSAGE="🫀 $(TZ='$LOG_TIMEZONE' date) > SUCCESS REVIVING UNRESPONSIVE APP AFTER $(cat $RUNTIME_PATH/app.retries) RETRIES: $DEPLOYMENT_VERSION"
      log
    fi

    reset_retries

    echo 0 > $RUNTIME_PATH/app.state
  else
    if [ -f $RUNTIME_PATH/app.raising ]; then
      LOG_MESSAGE="♻️ $(TZ='$LOG_TIMEZONE' date) > SUCCESS STARTING UPDATED APP AFTER $(cat $RUNTIME_PATH/app.retries) RETRIES: $DEPLOYMENT_VERSION"
      log
    fi

    echo 0 > $RUNTIME_PATH/app.state
  fi

  rm -f $RUNTIME_PATH/app.raising

  return $(cat $RUNTIME_PATH/app.state)
}

check_project_cargo () {
  if [ "$HAS_PROJECT_CARGO" = "TRUE" ]; then
    [ "$DEBUG" = "TRUE" ] &&  echo "Running check_project_cargo..."

    PKG_DIR=""

    if [ ! -d "$RUNTIME_PATH/package" ]; then
      PKG_DIR="$RUNTIME_PATH/pkg"
    else
      PKG_DIR="$RUNTIME_PATH/package"
    fi

    PCARGO_VERSION=$(hostler get $PKG_REPO_URL/$PKG_NAME/$STAGE.project-cargo.version | sed -e 's/[[:space:]]//g')
    CURRENT_PCARGO_VERSION=""

    if [ -d "$RUNTIME_PATH/pkg" ]; then
      [ "$DEBUG" = "TRUE" ] &&  echo "Fetching current vendor dependencies version from running app..."
      CURRENT_PCARGO_VERSION=$(cat $RUNTIME_PATH/pkg/project-cargo.version | sed -e 's/[[:space:]]//g')
    fi

    [ "$DEBUG" = "TRUE" ] && echo "CURRENT_PCARGO_VERSION: $CURRENT_PCARGO_VERSION"
    [ "$DEBUG" = "TRUE" ] && echo "PCARGO_VERSION: $PCARGO_VERSION"

    if [ "$CURRENT_PCARGO_VERSION" != "$PCARGO_VERSION" ]; then
      LOG_MESSAGE="🌐 $(TZ='$LOG_TIMEZONE' date) > New vendor dependencies version: $PCARGO_VERSION"
      log

      hostler get $PKG_REPO_URL/$PKG_NAME/project-cargo-$PCARGO_VERSION.tgz $RUNTIME_PATH/project-cargo-$PCARGO_VERSION.tgz

      [ "$DEBUG" = "TRUE" ] && echo $RUNTIME_PATH/project-cargo-$PCARGO_VERSION.tgz
      [ "$DEBUG" = "TRUE" ] && echo $PKG_REPO_URL/$PKG_NAME/project-cargo-$PCARGO_VERSION.tgz.checksum
      [ "$DEBUG" = "TRUE" ] && md5sum $RUNTIME_PATH/project-cargo-$PCARGO_VERSION.tgz
      [ "$DEBUG" = "TRUE" ] && hostler get $PKG_REPO_URL/$PKG_NAME/project-cargo-$PCARGO_VERSION.tgz.checksum

      if [ "$(cd $RUNTIME_PATH/ && md5sum project-cargo-$PCARGO_VERSION.tgz)" != "$(hostler get $PKG_REPO_URL/$PKG_NAME/project-cargo-$PCARGO_VERSION.tgz.checksum)" ]; then
        rm -f $RUNTIME_PATH/project-cargo-$PCARGO_VERSION.tgz
        echo "WARNING vendor dependencies checksum mismatch! Aborting update."
        return 1
      fi

      rm -f $RUNTIME_PATH/project-cargo-$CURRENT_PCARGO_VERSION.tgz
      tar -zxf $RUNTIME_PATH/project-cargo-$PCARGO_VERSION.tgz --directory $PKG_DIR
      return 0
    fi

    [ "$DEBUG" = "TRUE" ] && echo "No version dependency change..."

    if [ -d "$RUNTIME_PATH/package" ]; then
      [ "$DEBUG" = "TRUE" ] && echo "Adding current vendor dependencies to new app version..."
      tar -zxf $RUNTIME_PATH/project-cargo-$CURRENT_PCARGO_VERSION.tgz --directory $PKG_DIR
    else
      return 1
    fi
  fi
}

reset_retries () {
  echo 0 > $RUNTIME_PATH/app.retries
}

announce_fail () {
  LOG_MESSAGE="🚨 $(TZ='$LOG_TIMEZONE' date) > FAILED TO SPIN UP DEPLOYMENT: $DEPLOYMENT_VERSION"
  log
}

verify_running_correct_version () {
  [ "$DEBUG" = "TRUE" ] && echo "Running verify_running_correct_version..."

  CURRENT_VERSION=""

  if [ -d "$RUNTIME_PATH/pkg" ]; then
    CURRENT_VERSION=$(jq -r .version $RUNTIME_PATH/pkg/package.json)
  fi

  [ "$DEBUG" = "TRUE" ] && echo "Fetching: $PKG_REPO_URL/$PKG_NAME/$STAGE.version"

  DEPLOYMENT_VERSION=$(hostler get $PKG_REPO_URL/$PKG_NAME/$STAGE.version | sed -e 's/[[:space:]]//g')

  [ "$DEBUG" = "TRUE" ] && echo "CURRENT_VERSION: $CURRENT_VERSION"
  [ "$DEBUG" = "TRUE" ] && echo "DEPLOYMENT_VERSION: $DEPLOYMENT_VERSION"

  if [ ! -z "$DEPLOYMENT_VERSION" ]; then
    if [[ ! -d "$RUNTIME_PATH/pkg" || "$CURRENT_VERSION" != "$DEPLOYMENT_VERSION" ]]; then
      LOG_MESSAGE="🚀 $(TZ='$LOG_TIMEZONE' date) > Deploying new version: $DEPLOYMENT_VERSION"
      log

      { download_app &&\
      verify_download &&\
      unpack_app &&\
      check_project_cargo &&\
      stop_app &&\
      replace_app &&\
      reset_retries &&\
      run_app; } || announce_fail
    else
      [ "$DEBUG" = "TRUE" ] && echo "No version change..."

      check_project_cargo

      if [[ "$HAS_PROJECT_CARGO" = "TRUE" && "$?" = 0 ]]; then
        stop_app &&\
        reset_retries &&\
        run_app
      elif [ "$(cat $RUNTIME_PATH/app.state)" != 0 ]; then
        stop_app &&\
        run_app
      fi
    fi
  else
    [ "$DEBUG" = "TRUE" ] && echo "WARNING Failed to fetch latest DEPLOYMENT_VERSION"

    if [ "$(cat $RUNTIME_PATH/app.state)" != 0 ]; then
      stop_app &&\
      run_app
    fi
  fi

  ensure_app_running

  [ "$DEBUG" = "TRUE" ] && echo "Waiting 15s..."
  sleep 15
}

while [ "$(cat $RUNTIME_PATH/app.retries)" -lt "$MAX_RETRIES" ]
do
	verify_running_correct_version
done

LOG_MESSAGE="🚨 $(TZ='$LOG_TIMEZONE' date) > APP FAILED TO START AFTER $(cat $RUNTIME_PATH/app.retries) RETRIES: $DEPLOYMENT_VERSION"
log

LOG_MESSAGE="Terminating instance."
log
